[gd_scene load_steps=3 format=3 uid="uid://bg8rvyokyatv8"]

[ext_resource type="PackedScene" uid="uid://bhbiho5r03tp8" path="res://Utils/tile_gridlines.tscn" id="1_rg5s3"]

[sub_resource type="GDScript" id="GDScript_04t61"]
script/source = "extends Node2D
# Composites multiple layers of mixed sizes. All must use the same tileset
var active_tileset : TileSet
var active_tileset_filename : String
var active_editing_sublayer : PaintableTileMap = null
var active_screen_index : int = 0
var underlying_display_data : Resource #Either an MSDRoom or a LayerArtPortion, will call appropriate display function

@export var SublayerOperations : VSplitContainer
@onready var _layer_holder := $LayerHolder

func _ready():
	SublayerOperations.activated.connect(start_editing_sublayer)
	Messages.connect(\"edit_type_changed\", edit_type_changed)

#var all_layer_nodes : Array[LayerPortionDisplay]
@onready var portion_prefab = load(\"res://TileVisualDisplay/layer_portion_display.tscn\")

func set_editing_sublayer(layer_info : Vector2i):
	if active_editing_sublayer:
		active_editing_sublayer.set_process_unhandled_input(false)
	active_editing_sublayer = _layer_holder.get_child(layer_info[0]).get_child(layer_info[1])
	active_editing_sublayer.set_process_unhandled_input(true)

func rebuild_tileset(filename, tilesize = 20):
	active_tileset = TileSetLoader.make_tileset(filename, tilesize)
	active_tileset_filename = filename
	for c in _layer_holder.get_children():
		if c is LayerPortionDisplay:
			c.active_tileset = active_tileset
			c.display_portion()

func clear_display():
	for c in _layer_holder.get_children():
		c.free()

# Generic function that generates based on the type of the stored data.
# When you just want to re-generate, call this!
func generate():
	if underlying_display_data is MSDRoom:
		generate_from_msd(underlying_display_data, active_screen_index)

	elif underlying_display_data is LayerArtPortion:
		generate_from_layer_portion(underlying_display_data)

# Gets from an MSD, and creates the resources for each layer in the room
func generate_from_msd(msd_room : MSDRoom, s_index = 0, graphics_filename : String = \"\"):
	clear_display()
	underlying_display_data = msd_room
	active_screen_index = s_index
	var layer_z = 0
	for layer in msd_room.layers:
		var visual_layer : LayerPortionDisplay = portion_prefab.instantiate()
		var to_display : LayerArtPortion = LayerArtPortion.new(layer.layer_width, layer.layer_height, layer)
		if !graphics_filename.is_empty():
			to_display.tilesheet_filename = Globals.make_graphics_filename(graphics_filename)
			if to_display.tilesheet_filename != active_tileset_filename:
				rebuild_tileset(to_display.tilesheet_filename)
		_layer_holder.add_child(visual_layer)
		visual_layer.active_tileset = active_tileset
		visual_layer.z_index = layer_z
		layer_z -= 20
		visual_layer.to_display = to_display
		visual_layer.top_left_offset = layer.get_top_left_2d(s_index)
		visual_layer.display_portion()

	SublayerOperations.update_sublayer_info(underlying_display_data, _layer_holder.get_children())

func generate_from_layer_portion(portion : LayerArtPortion):
	clear_display()
	underlying_display_data = portion
	var visual_layer : LayerPortionDisplay = portion_prefab.instantiate()
	
	portion.tilesheet_filename = Globals.current_graphics_filename
	if portion.tilesheet_filename != active_tileset_filename or portion.tilesheet_filename == \"\":
		rebuild_tileset(portion.tilesheet_filename)
	$TileGridlines.height = portion.height
	$TileGridlines.width = portion.width

	_layer_holder.add_child(visual_layer)
	visual_layer.active_tileset = active_tileset
	visual_layer.z_index = 0
	visual_layer.to_display = portion
	visual_layer.top_left_offset = Vector2i.ZERO
	visual_layer.display_portion()

	SublayerOperations.update_sublayer_info(underlying_display_data, _layer_holder.get_children())

func get_sublayer_info_from_tree(tree_layer):
	return Vector2(tree_layer.get_parent().get_index(), tree_layer.get_index())
	
	
func start_editing_sublayer(sublayer : TreeItem):
	set_editing_sublayer(get_sublayer_info_from_tree(sublayer))


func edit_type_changed(e):
	$TileGridlines.visible = (e == Globals.EditType.ART)
"

[node name="LayerCompositeDisplay" type="Node2D"]
script = SubResource("GDScript_04t61")

[node name="LayerHolder" type="Node2D" parent="."]

[node name="TileGridlines" parent="." instance=ExtResource("1_rg5s3")]
visible = false
